import streamlit as st
import plotly.express as px
from graphviz import Digraph
import plotly.graph_objects as go
import pandas as pd
import numpy as np

st.set_page_config(
    page_icon="üí†",
)

# Dictionnaire des recommandations
recommandations = {
    "Automatisation": {
        "Texte": [("BERT", 70), ("Outils NLP", 30)],
        "Nombres": [("R√©gression logistique", 60), ("Arbres de d√©cision", 40)],
        "Images": [("CNN", 80), ("Transfer Learning", 20)],
        "S√©ries temporelles": [("Moyenne mobile", 50), ("ARIMA", 50)]
    },
    "Pr√©cision": {
        "Texte": [("Transformers fine-tun√©s", 70), ("SVM avec features textuelles", 30)],
        "Nombres": [("XGBoost", 60), ("Deep Learning", 40)],
        "Images": [("ResNet", 70), ("EfficientNet", 30)],
        "S√©ries temporelles": [("LSTM", 60), ("Prophet", 40)]
    },
    "D√©couverte d'insights": {
        "Texte": [("LDA", 60), ("Word Embeddings", 40)],
        "Nombres": [("PCA", 50), ("t-SNE", 50)],
        "Images": [("Autoencodeurs", 70), ("GAN", 30)],
        "S√©ries temporelles": [("D√©tection d'anomalies", 60), ("Clustering temporel", 40)]
    },
    "Personnalisation": {
        "Texte": [("Recommandation bas√©e sur le contenu", 70), ("Collaborative Filtering avec texte", 30)],
        "Nombres": [("Syst√®mes de recommandation avec embeddings", 60), ("K-Means", 40)],
        "Images": [("CNN pour features visuelles", 70), ("Similarit√© cosinus", 30)],
        "S√©ries temporelles": [("Mod√®les de pr√©vision personnalis√©s", 50), ("Recommandation s√©quentielle", 50)]
    }
}

# Dictionnaire des descriptions
descriptions = {
    "BERT": "Mod√®le pr√©-entra√Æn√© pour les t√¢ches NLP comme la classification.",
    "Outils NLP": "Outils pour tokenization, stemming, etc.",
    "R√©gression logistique": "Mod√®le lin√©aire pour classification rapide.",
    "Arbres de d√©cision": "Mod√®le bas√© sur des r√®gles.",
    "CNN": "R√©seaux convolutionnels pour les images.",
    "Transfer Learning": "R√©utilisation de mod√®les pr√©-entra√Æn√©s.",
    "Moyenne mobile": "Lissage simple des s√©ries temporelles.",
    "ARIMA": "Pr√©visions pour s√©ries temporelles.",
    "Transformers fine-tun√©s": "Mod√®les ajust√©s pour pr√©cision.",
    "SVM avec features textuelles": "Classification pr√©cise sur texte.",
    "XGBoost": "Gradient boosting pr√©cis pour donn√©es tabulaires.",
    "Deep Learning": "R√©seaux profonds pour relations complexes.",
    "ResNet": "R√©seau r√©siduel pour images.",
    "EfficientNet": "Optimis√© pour pr√©cision et efficacit√©.",
    "LSTM": "R√©seaux r√©currents pour s√©ries temporelles.",
    "Prophet": "Pr√©visions faciles pour s√©ries temporelles.",
    "LDA": "Topic modeling pour textes.",
    "Word Embeddings": "Repr√©sentations vectorielles des mots.",
    "PCA": "R√©duction de dimension pour exploration.",
    "t-SNE": "Visualisation des donn√©es complexes.",
    "Autoencodeurs": "Apprentissage non supervis√© pour insights.",
    "GAN": "G√©n√©ration de donn√©es synth√©tiques.",
    "D√©tection d'anomalies": "Identification des √©v√©nements inhabituels.",
    "Clustering temporel": "Regroupement des s√©ries temporelles.",
    "Recommandation bas√©e sur le contenu": "Suggestions bas√©es sur le contenu.",
    "Collaborative Filtering avec texte": "Recommandations via pr√©f√©rences similaires.",
    "Syst√®mes de recommandation avec embeddings": "Personnalisation via embeddings.",
    "K-Means": "Segmentation des donn√©es.",
    "CNN pour features visuelles": "Extraction de caract√©ristiques visuelles.",
    "Similarit√© cosinus": "Mesure de similarit√© pour recommandations.",
    "Mod√®les de pr√©vision personnalis√©s": "Pr√©visions adapt√©es √† l'utilisateur.",
    "Recommandation s√©quentielle": "Suggestions bas√©es sur des s√©quences."
}

# Interface utilisateur
st.title("Outil de recommandation de mod√®les d'IA")
st.write("""S√©lectionnez vos besoins pour obtenir des recommandations de mod√®les d'IA. Cet outil, 
d√©velopp√© avec Streamlit, a un objectif r√©solument p√©dagogique : il vise √† illustrer de mani√®re concr√®te 
et interactive les propos avanc√©s dans l‚Äôarticle sur l‚Äôimpact de l‚Äôintelligence artificielle dans l‚Äôanalyse de donn√©es.""")

with st.form("formulaire"):
    objectif = st.selectbox("Objectif principal", ["Automatisation", "Pr√©cision", "D√©couverte d'insights", "Personnalisation"])
    type_donnees = st.selectbox("Type de donn√©es", ["Texte", "Nombres", "Images", "S√©ries temporelles"])
    soumettre = st.form_submit_button("Obtenir des recommandations")

# Traitement de la soumission
if soumettre:
    modeles_scores = recommandations[objectif][type_donnees]
    modeles, scores = zip(*modeles_scores)
    
    # Cr√©ation du graphique
    df = pd.DataFrame({"Mod√®le": modeles, "Pertinence": scores})
    fig = px.bar(df, x="Mod√®le", y="Pertinence", title="Mod√®les recommand√©s")
    st.plotly_chart(fig)
    fig = px.treemap(df, path=["Mod√®le"], values="Pertinence", title="Pertinence des mod√®les")
    st.plotly_chart(fig)
    # Visualisation de l‚Äôarbre de d√©cision avec Graphviz
    dot = Digraph(comment="Arbre de d√©cision pour le choix des mod√®les d‚ÄôIA")
    dot.node("A", "Objectif principal")
    dot.node("B", f"{objectif}")
    dot.node("C", f"Type de donn√©es : {type_donnees}")
    dot.node("D", f"Recommandations : {', '.join([f'{m} ({s})' for m, s in modeles_scores])}")
    
    dot.edges(["AB", "BC", "CD"])
    
    # Afficher l‚Äôarbre dans Streamlit
    st.subheader("Arbre de d√©cision")
    st.graphviz_chart(dot)
    
    # Sankey Diagram
    fig2 = go.Figure(data=[go.Sankey(
        valueformat = ".0f",
        node=dict(
            pad=50,
            thickness=5,
            line=dict(color = "black", width = 0.05),
            label=["Objectif", objectif, type_donnees] + list(modeles),
            color="blue"
        ),
        link=dict(
            source=[0, 1, 2, 2],  # Indices des n≈ìuds source
            target=[1, 2, 3, 4],  # Indices des n≈ìuds cible (mod√®les)
            value=[100, 100, scores[0], scores[1]],
            color="#F9F9F9"  # Flux proportionnels aux scores
        )
    )])
    fig2.update_layout(title_text="Flux de d√©cision pour les mod√®les d‚ÄôIA", font_size=20)
    st.plotly_chart(fig2)
    
    # Liste des mod√®les avec descriptions
    st.write("### Mod√®les recommand√©s :")
    for modele in modeles:
        with st.expander(modele):
            st.write(descriptions[modele])
    
    st.write("**Note :** Les scores (0-100) refl√®tent la pertinence relative des mod√®les pour votre cas.")
